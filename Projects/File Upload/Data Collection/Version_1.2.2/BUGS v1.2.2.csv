Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Fix Version/s,Due Date,Votes,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Duplicate),Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment
disk leak if multipart parse error,FILEUPLOAD-160,12397071,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,jochen@apache.org,yozh,yozh,29/May/08 11:48,05/Jun/17 13:54,04/Apr/19 09:18,18/Jan/09 01:40,,1.2.2,,0,"FleUploadBase.parseRequest() keeps files on disk if parser error occured. Patch

{code}
diff -r cf24bc636e09 -r f706d95f56b7 src/java/org/apache/commons/fileupload/FileUploadBase.java
--- a/src/java/org/apache/commons/fileupload/FileUploadBase.java	Wed May 28 22:25:00 2008 +0400
+++ b/src/java/org/apache/commons/fileupload/FileUploadBase.java	Thu May 29 15:40:04 2008 +0400
@@ -345,9 +345,10 @@
      */
     public List /* FileItem */ parseRequest(RequestContext ctx)
             throws FileUploadException {
+        List items = new ArrayList();
+        boolean successful = false;
         try {
             FileItemIterator iter = getItemIterator(ctx);
-            List items = new ArrayList();
             FileItemFactory fac = getFileItemFactory();
             if (fac == null) {
                 throw new NullPointerException(
@@ -358,6 +359,7 @@
                 FileItem fileItem = fac.createItem(item.getFieldName(),
                         item.getContentType(), item.isFormField(),
                         item.getName());
+                items.add(fileItem);
                 try {
                     Streams.copy(item.openStream(), fileItem.getOutputStream(),
                             true);
@@ -372,13 +374,24 @@
                     final FileItemHeaders fih = item.getHeaders();
                     ((FileItemHeadersSupport) fileItem).setHeaders(fih);
                 }
-                items.add(fileItem);
             }
+            successful = true;
             return items;
         } catch (FileUploadIOException e) {
             throw (FileUploadException) e.getCause();
         } catch (IOException e) {
             throw new FileUploadException(e.getMessage(), e);
+        } finally {
+            if (!successful) {
+                for (Iterator iterator = items.iterator(); iterator.hasNext();) {
+                    FileItem fileItem = (FileItem) iterator.next();
+                    try {
+                        fileItem.delete();
+                    } catch (Throwable e) {
+                        // ignore it
+                    }
+                }
+            }
         }
     }
 
{code}",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-18 01:40:33.578,,,false,,,,,,,,,,,,43072,,,Mon Jun 05 13:54:44 UTC 2017,,,,,,0|i0sknj:,164823,,,,,,,,23/Sep/08 17:48;yozh;Hello!,"18/Jan/09 01:40;jochen@apache.org;Applied, thank you!
",05/Jun/17 13:54;chtompki;1.2.2 Released.,
MultipartStream javadoc example cannot be compiled,FILEUPLOAD-158,12397002,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,jochen@apache.org,yozh,yozh,28/May/08 15:58,05/Jun/17 13:51,04/Apr/19 09:18,18/Jan/09 01:55,,1.2.2,,0,"{code}
        MultipartStream multipartStream = new MultipartStream(input,
                                                              boundary);
        boolean nextPart = multipartStream.skipPreamble();
        OutputStream output;
        while(nextPart) {
            header = chunks.readHeader();
            // process headers
            // create some output stream
            multipartStream.readBodyPart(output);
            nextPart = multipartStream.readBoundary();
        }
{code}

""chunks"" means ""multipartStream""?

""readHeader"" means ""readHeaders""?

header variable should be declared

""readBodyPart"" means ""readBodyData""?",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-18 01:55:30.476,,,false,,,,,,,,,,,,43074,,,Mon Jun 05 13:51:35 UTC 2017,,,,,,0|i0sknz:,164825,,,,,,,,"18/Jan/09 01:55;jochen@apache.org;Applied, thank you!
",05/Jun/17 13:51;chtompki;Released,,
The ProgressListener isn't always notified about the total number of Items found in a MultipartStream.,FILEUPLOAD-157,12396699,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,jochen@apache.org,jdid,jdid,23/May/08 10:25,06/Jun/17 04:28,04/Apr/19 09:18,18/Jan/09 01:59,1.2,1.2.2,,0,"A ProgressListener doesn't always get informed when a new part is found by the MultipartStream. This is most easily replicated by uploading small files (a few bytes in size). The listener will be correctly informed about the content length and the total bytes uploaded but it will be told that it is currently working on item 0. This causes an issue when this count is used to detect a form has been submitted with no file.

This has a simple fix to the org.apache.commons.fileupload.MultipartStream (patch will be attached), when the items count is incremented the listener needs to be notified.

",All.,3600,3600,,0%,3600,3600,,,,23/May/08 10:26;jdid;MultipartStream-item-listener-notification.patch;https://issues.apache.org/jira/secure/attachment/12382631/MultipartStream-item-listener-notification.patch,1.0,,,,,,,,,,,,,,,,,,,2009-01-18 01:59:57.66,,,false,,,,,,,,,,,,43075,,,Tue Jun 06 04:28:40 UTC 2017,,,,,,0|i0sko7:,164826,,,,,,,,23/May/08 10:26;jdid;Patch file,"18/Jan/09 01:59;jochen@apache.org;Applied, thank you!",06/Jun/17 04:28;chtompki;1.2.2 released.,
MultipartStream constructor requires package access to avoid deprecation warnings,FILEUPLOAD-156,12395728,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Minor,Fixed,jochen@apache.org,faseidl,faseidl,09/May/08 16:45,06/Jun/17 04:47,04/Apr/19 09:18,18/Jan/09 02:05,1.2.1,1.2.2,,1,"All of the MulitipartStream constructor signatures are deprecated except one that requires a org.apache.commons.fileupload.MultipartStream.ProgressNotifier parameter.  However, the ProgressNotifier class has package access.  Thus, it is impossible for an application to make use of the MultipartStream class without using a deprecated constructor.",All,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-19 12:51:53.345,,,false,,,,,,,,,,,,43076,,,Tue Jun 06 04:47:59 UTC 2017,,,,,,0|i0skof:,164827,,,,,,,,"19/Sep/08 12:51;mads_d;If you instansiate the class via the deprecated constructors (which is the only possibility you have), you will run in to a NullPointerException the second you try to use it.

The constuctors sets the notifyer-field to null during instansiation.",19/Sep/08 14:38;martinc;This class was never intended to be exposed as a public class. It was designed to be internal to FileUpload.,"18/Jan/09 02:05;jochen@apache.org;It is, of course, a design error, that a ProgressNotifier is required. The class is now public, additionally a null value may be supplied.
",06/Jun/17 04:47;chtompki;1.2.2 released.
Unit incompatibility betweenFileUpload.setFileSizeMax and FileUploadBase$FileItemIteratorImpl,FILEUPLOAD-152,12385862,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Minor,Fixed,jochen@apache.org,duzakropka,duzakropka,09/Jan/08 13:03,06/Jun/17 04:55,04/Apr/19 09:18,18/Jan/09 02:26,1.2,1.2.2,,0,"FileUploadBase$FileItemIteratorImpl.FileItemStreamImpl
If we have too big file (binary, for example) and FileSizeLimitExceededException will be thrown you're always creating message: ""The field "" + fieldName + "" exceeds its maximum permitted "" + "" size of "" + pSizeMax + "" characters.""
Size limit is setting using bytes, in this message user will have an information about too many characters... 
Can you change message to use that same unit?",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-18 02:26:32.572,,,false,,,,,,,,,,,,43080,,,Tue Jun 06 04:55:21 UTC 2017,,,,,,0|i0skpb:,164831,,,,,,,,"18/Jan/09 02:26;jochen@apache.org;You are right. Fixed.
",06/Jun/17 04:55;chtompki;1.2.2 released.,,
Incorrect Information in documentation.,FILEUPLOAD-147,12379431,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Trivial,Duplicate,jochen@apache.org,stevez,stevez,01/Oct/07 19:35,06/Jun/17 04:56,04/Apr/19 09:18,18/Jan/09 02:21,1.2,1.2.2,,2,"http://commons.apache.org/fileupload/using.html

The guide refers to functions not in the current API's for apache commons io and commons upload


The specific section:

        FileCleaningTracker fileCleaningTracker
            = FileCleanerCleanup.getFileCleaningTracker(context);
        return new DiskFileItemFactory(fileCleaningTracker,
                                       DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD,
                                       repository);",Firefox,,,,,,,,,FILEUPLOAD-155,,0.0,,,,,,,,,,,,,,,,,,,2009-01-18 02:21:15.412,,,false,,,,,,,,,,,,43085,,,Tue Jun 06 04:56:51 UTC 2017,,,,,,0|i0skqf:,164836,,,,,,,,"18/Jan/09 02:21;jochen@apache.org;Duplicate of FILEUPLOAD-155.
",06/Jun/17 04:56;chtompki;dupplicate.,,
