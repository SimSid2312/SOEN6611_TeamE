Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Fix Version/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Cloners),Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment
"CLONE - Bug in docs: tmp file delete conditions in ""Resource Cleanup"" section of ""using.html""",FILEUPLOAD-270,12924425,Bug,Open,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Minor,,jochen@apache.org,craftwithin,craftwithin,27/Dec/15 23:16,28/Dec/15 14:32,04/Apr/19 09:22,,1.3,,1.4,,0,,"The guide at http://commons.apache.org/proper/commons-fileupload/using.html incorrectly writes: ""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of java.io.File is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.2.2|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes org.apache.commons.fileupload.disk.DiskFileItemFactory.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in tracker.track(result.getTempFile(), this), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItemFactory is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.3|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes DiskFileItem.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in DiskFileItem result=[...]; [...]; tracker.track(result.getTempFile(), result), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem is garbage collected."".

(The following holds for both versions 1.2.2 and 1.3)

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem (for commons-fileupload v.1.3) and instance of org.apache.commons.fileupload.disk.DiskFileItemFactory (for commons-fileupload v.1.2.2) is garbage collected."".
",,,,,,,,,,FILEUPLOAD-234,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,2015-12-27 23:16:45.0,,,,,,0|i2qbtz:,9223372036854775807,,,,,,,,,,
Empty files in mutipart requests aren't saved to disk,FILEUPLOAD-258,12741450,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Minor,Fixed,,prcjac,prcjac,15/Sep/14 11:25,05/Feb/19 14:11,04/Apr/19 09:22,11/Nov/14 20:42,1.3,1.3.1,1.4,,0,,"If a multipart request contains an empty file, ServletFileUpload#parseRequest does not create a corresponding temporary file on the file system. If any operations are performed on the corresponding file object from DiskFileItem#getStoreLocation() a FileNotFoundException is thrown.

FileUploadBase#parseRequest() copies the multipart file input stream to the temporary file output stream with Streams#copy(). This method only creates the temporary file on the file system if data is written to the file's output stream. Since the input stream is empty, write is never called on the output stream and the temporary file is not created.

I've used the following snippet to overcome this issue. This ensures the temporary file is created on the file system prior to writing:

{code:title=Snippet.java|borderStyle=solid}
final DiskFileItemFactory factory = new DiskFileItemFactory() {
  @Override
  public FileItem createItem(final String fieldName, final String contentType, final boolean isFormField, final String fileName) {
    return new DiskFileItem(fieldName, contentType, isFormField, fileName, getSizeThreshold(), getRepository()) {
      private static final long serialVersionUID = 1L;

      @Override
      protected File getTempFile() {
        File tempFile = super.getTempFile();
        try {
          tempFile.createNewFile();
        }
        catch (final IOException e) {
          //Handle appropriately
          ...
        }
        return tempFile;
      }
    };
  }
};

ServletFileUpload upload = new ServletFileUpload(factory);
{code}",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-11 20:42:35.053,,,false,,,,,,,,,,,,9223372036854775807,,,Tue Feb 05 14:11:46 UTC 2019,,,,,,0|i201iv:,9223372036854775807,,,,,,,,"11/Nov/14 20:42;tn;The getStoreLocation() method wrongly returned a File object in case the FileItem was stored in memory. The javadoc was stating that it should return null in this case.

Fixed this in r1638377.

You can also use the method isInMemory() to determine if the file is stored on disk or solely in memory.

btw. the problem you describe can also happen for file smaller than the sizeThreshold for the DiskFileItemFactory.",05/Feb/19 14:11;chtompki;1.4 Released,
Fix Javadoc 1.8 errors,FILEUPLOAD-257,12724387,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Minor,Fixed,,scop,scop,30/Jun/14 07:51,05/Feb/19 14:11,04/Apr/19 09:22,11/Nov/14 17:36,Nightly Builds,,1.4,,0,patch,"Javadoc build fails with Java 1.8, fix attached.",,,,,,,,,,,30/Jun/14 07:52;scop;0001-Fix-Javadoc-1.8-errors.patch;https://issues.apache.org/jira/secure/attachment/12653109/0001-Fix-Javadoc-1.8-errors.patch,1.0,,,,,,,,,,,,,,,,,,,2014-11-11 17:36:42.922,,,false,,,,,,,,,,,,402570,,,Tue Feb 05 14:11:40 UTC 2019,,,,,,0|i1xahz:,402637,,,,,,,,"11/Nov/14 17:36;tn;Partially applied the patch in r1638222 as one problem has already been fixed before.

Thanks for the report and patch!",05/Feb/19 14:11;chtompki;1.4 Released,
DiskFileItem#write can lose original IO error,FILEUPLOAD-252,12695602,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,,sebb@apache.org,sebb@apache.org,17/Feb/14 23:16,05/Feb/19 14:11,04/Apr/19 09:22,11/Nov/14 20:45,,,1.4,,0,,"The method DiskFileItem#write has the following code:

{code}
FileOutputStream fout = null;
try {
    fout = new FileOutputStream(file);
    fout.write(get());
} finally {
    if (fout != null) {
        fout.close();
    }
}
{code}

If the write fails and then the close fails, the write failure will be masked by the close error. It might be better to write the code as:

{code}
FileOutputStream fout = null;
try {
    fout = new FileOutputStream(file);
    fout.write(get());
    fout.close();
} finally {
    IOUtils.closeQuietly(fout);
}
{code}

This would ensure that the first error was reported.",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-11 20:45:28.592,,,false,,,,,,,,,,,,374110,,,Tue Feb 05 14:11:46 UTC 2019,,,,,,0|i1sgwv:,374410,,,,,,,,11/Nov/14 20:45;tn;Fixed in r1638380.,"09/Dec/14 13:40;sebb@apache.org;And

 http://svn.apache.org/r1643123",05/Feb/19 14:11;chtompki;1.4 Released
DiskFileItem#getTempFile() is broken,FILEUPLOAD-251,12695433,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,,sebb@apache.org,sebb@apache.org,17/Feb/14 00:53,05/Feb/19 14:11,04/Apr/19 09:22,17/Feb/14 02:22,1.3.1,,1.4,,0,,"DiskFileItem#getTempFile() looks wrong.

Presumably the intention of providing the protected method was to allow the generation of the path name to be overwritten. This can indeed be done. 

However, if this is done, the tempFile variable will not be set up, so the path name won't be cached - unless the overriding method also caches the name.

The file name needs to agree with the DeferredFileOutputStream that is created. This is implied in the Javadoc, but is not currently enforced.

The protected method needs to implement the name generation part only.",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-05 14:11:41.184,,,false,,,,,,,,,,,,373941,,,Tue Feb 05 14:11:41 UTC 2019,,,,,,0|i1sfvj:,374241,,,,,,,,"17/Feb/14 02:10;sebb@apache.org;On second thoughts, I don't think it is possible to fix this without potentially breaking subclasses.

Subclasses that override the method must ensure that the same File is returned each time.
This needs to be documented.","17/Feb/14 02:22;sebb@apache.org;URL: http://svn.apache.org/r1568874
Log:
FILEUPLOAD-251 DiskFileItem#getTempFile() is broken

Modified:
    commons/proper/fileupload/trunk/src/changes/changes.xml
    commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java
",05/Feb/19 14:11;chtompki;1.4 Released
FileUploadBase - potential resource leak - InputStream not closed on exception,FILEUPLOAD-250,12695428,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,,sebb@apache.org,sebb@apache.org,16/Feb/14 23:55,05/Feb/19 14:11,04/Apr/19 09:22,17/Feb/14 00:17,1.3.1,,1.4,,0,,"FileUploadBase has several instances where the InputStream ""input"" is not closed when an Exception is throw. This can potentially be a resource leak and is best avoided.

The first case is easy to deal with, as the InputStream does not need to be created until after the SizeLimitExceededException has been thrown.

The next case occurs if the boundary is not found.
This check could be moved to before the size check, however that would change the behaviour slightly, as FileUploadException would be thrown instead of SizeLimitExceededException if both boundary and size are wrong.

The last case is where InvalidContentTypeException is thrown. This cannot easily be avoided.",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-05 14:11:42.478,,,false,,,,,,,,,,,,373936,,,Tue Feb 05 14:11:42 UTC 2019,,,,,,0|i1sfuf:,374236,,,,,,,,"17/Feb/14 00:17;sebb@apache.org;URL: http://svn.apache.org/r1568866
Log:
FILEUPLOAD-250 FileUploadBase - potential resource leak - InputStream not closed on exception

Modified:
    commons/proper/fileupload/trunk/src/changes/changes.xml
    commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/FileUploadBase.java
",05/Feb/19 14:11;chtompki;1.4 Released,
[DISK] Unsafe file move operation (possibly swallowing write errors),FILEUPLOAD-248,12695383,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,b.eckenfels,b.eckenfels,b.eckenfels,15/Feb/14 22:43,05/Feb/19 14:11,04/Apr/19 09:22,19/May/14 22:34,1.4,,1.4,,0,,"Because of a fix for FILEUPLOAD-246 I noticed that there is a fileRenameOrCopy function which swallows exceptions on the OutputStream#close() method. This is unsafe since a lot of filesystem operations can fail in exactly this step.

There is also a Commons IO Utility which does rename or copy, so the whole code block could be removed.

Problem is here in Line 416: http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java?revision=1568691&view=markup

Besides using FileUtil.move() another option would be to add a out.close() before the catch.
",Source,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-16 00:37:46.454,,,false,,,,,,,,,,,,373891,,,Tue Feb 05 14:11:41 UTC 2019,,,,,,0|i1sfkf:,374191,,,,,,,,16/Feb/14 00:37;sebb@apache.org;Agreed it would make more sense to use the method from Commons IO.,"19/May/14 22:34;b.eckenfels;[FILEUPLOAD-248] DiskFileItem might suppress critical IOExceptions on rename - use FileUtil.move instead.
Also: close input stream silently to make delete more probable. Remove unneeded BufferedInputStream indirection for readFully().

http://svn.apache.org/viewvc?view=revision&revision=1596086",05/Feb/19 14:11;chtompki;1.4 Released
FileUpload should use IOUtils.closeQuietly where relevant,FILEUPLOAD-246,12695378,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,,sebb@apache.org,sebb@apache.org,15/Feb/14 21:25,05/Feb/19 14:11,04/Apr/19 09:22,15/Feb/14 21:31,,,1.4,,0,,"FileUpload already depends on Common IO, so it makes sense to simplify the code by using the method IOUtils#closeQuietly instead of code such as

{code}
if (out != null) {
    try {
        out.close();
    } catch (IOException e) {
        // ignore
    }
}
{code}",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-05 14:11:38.508,,,false,,,,,,,,,,,,373886,,,Tue Feb 05 14:11:38 UTC 2019,,,,,,0|i1sfjb:,374186,,,,,,,,"15/Feb/14 21:31;sebb@apache.org;URL: http://svn.apache.org/r1568683
Log:
FILEUPLOAD-246 FileUpload should use IOUtils.closeQuietly where relevant

Modified:
    commons/proper/fileupload/trunk/src/changes/changes.xml
    commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java
",05/Feb/19 14:11;chtompki;1.4 Released,
DiskFileItem.get() may not fully read the data,FILEUPLOAD-245,12695375,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,,sebb@apache.org,sebb@apache.org,15/Feb/14 21:12,28/Dec/16 22:26,04/Apr/19 09:22,15/Feb/14 21:19,1.3.1,,1.4,,0,,"DiskFileItem.get() invokes InputStream#read, and appears to assume that it will always read all available data. However that is not necessarily the case.

It would be safer to use the Commons IO method IOUtils#readFully

[The component already depends on CommonsIO]",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-28 12:54:48.637,,,false,,,,,,,,,,,,373883,,,Wed Dec 28 22:26:20 UTC 2016,,,,,,0|i1sfin:,374183,,,,,,,,"15/Feb/14 21:19;sebb@apache.org;URL: http://svn.apache.org/r1568678
Log:
FILEUPLOAD-245 DiskFileItem.get() may not fully read the data

Modified:
    commons/proper/fileupload/trunk/src/changes/changes.xml
    commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java
","28/Dec/16 12:54;blueskyufo;Hi Sebb,

Please attach your test case to show when DiskFileItem.get() can not fully read the data.
I'm using 1.3.1 version and facing a problem which may relate to this ticket.
Thank you.","28/Dec/16 22:26;sebb@apache.org;There is no test case, but the Javadoc makes it clear that InputStream#read does not necessarily read to EOF."
.DiskFileItem.readObject fails to close FileInputStream,FILEUPLOAD-244,12695369,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,,sebb@apache.org,sebb@apache.org,15/Feb/14 18:30,05/Feb/19 14:11,04/Apr/19 09:22,15/Feb/14 22:04,,,1.4,,0,,Eclipse reports that .DiskFileItem.readObject fails to close FileInputStream,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-05 14:11:39.585,,,false,,,,,,,,,,,,373877,,,Tue Feb 05 14:11:39 UTC 2019,,,,,,0|i1sfhb:,374177,,,,,,,,"15/Feb/14 22:04;sebb@apache.org;URL: http://svn.apache.org/r1568691
Log:
FILEUPLOAD-244 DiskFileItem.readObject fails to close FileInputStream

Modified:
    commons/proper/fileupload/trunk/src/changes/changes.xml
    commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java",05/Feb/19 14:11;chtompki;1.4 Released,
Should not catch and ignore Throwable,FILEUPLOAD-242,12693542,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Major,Fixed,,sebb@apache.org,sebb@apache.org,06/Feb/14 12:18,05/Feb/19 14:11,04/Apr/19 09:22,11/Nov/14 20:09,,,1.4,,0,,"Code should never catch & ignore all Throwables.

For example, ThreadDeath may be caught, but must be rethrown.
VirtualMachineError must also never be swallowed.

See also

https://issues.apache.org/bugzilla/show_bug.cgi?id=48644
and
org/apache/tomcat/util/ExceptionUtils#handleThrowable()
https://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/tomcat/util/ExceptionUtils.java",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-11 20:09:48.454,,,false,,,,,,,,,,,,372127,,,Tue Feb 05 14:11:40 UTC 2019,,,,,,0|i1s4rr:,372432,,,,,,,,11/Nov/14 20:09;tn;Fixed in r1638340.,"03/Dec/14 12:43;sebb@apache.org;Followup:

URL: http://svn.apache.org/r1643019
Log:
[FILEUPLOAD-242] Do not silently swallow all Throwables.
Instead swallow only Exceptions

Modified:
    commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/FileUploadBase.java
",05/Feb/19 14:11;chtompki;1.4 Released
"Bug in docs: tmp file delete conditions in ""Resource Cleanup"" section of ""using.html""",FILEUPLOAD-234,12652619,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Minor,Fixed,,egphilippov,egphilippov,13/Jun/13 11:39,05/Feb/19 14:11,04/Apr/19 09:22,11/Nov/14 15:06,1.3,,1.4,,0,,"The guide at http://commons.apache.org/proper/commons-fileupload/using.html incorrectly writes: ""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of java.io.File is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.2.2|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes org.apache.commons.fileupload.disk.DiskFileItemFactory.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in tracker.track(result.getTempFile(), this), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItemFactory is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.3|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes DiskFileItem.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in DiskFileItem result=[...]; [...]; tracker.track(result.getTempFile(), result), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem is garbage collected."".

(The following holds for both versions 1.2.2 and 1.3)

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem (for commons-fileupload v.1.3) and instance of org.apache.commons.fileupload.disk.DiskFileItemFactory (for commons-fileupload v.1.2.2) is garbage collected."".
",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-11 15:06:08.088,,,false,,,,,,,,,,,,332943,,,Tue Feb 05 14:11:44 UTC 2019,,,,,,0|i1lfon:,333271,,,,,,,,"11/Nov/14 15:06;tn;Fixed in r1638131.

Thanks for the report.","19/Aug/15 17:29;jonenst;The section also has
""
Disabling cleanup of temporary files

To disable tracking of temporary files, you may set the FileCleaningTracker to null. Consequently, created files will no longer be tracked. In particular, they will no longer be deleted automatically.
""
But disabling the tracking is not enough to prevent the file associated with DiskFileItem to be deleted because DiskFileItem also has a finalize method which gets called by the garbage collector at some point anyway.

So I would add in the intro
""
This is done silently either by the org.apache.commons.io.FileCleaner class, which starts a reaper thread, or by the finalize() method of DiskFileItem, whichever is called first. Using the reaper thread is optional. To use the reaper thread, see below. Usually, using the reaper thread allows to remove the files earlier and more deterministically than waiting for the garbage collector to call the finalize() method. It is not possible to disable the cleanup of temporary files when DiskFileItem is garbage collected.
""
 and remove the ""Disabling cleanup of temporary files"" section:

Jon Harper",05/Feb/19 14:11;chtompki;1.4 Released
